import telebot
import time
import threading
from datetime import datetime

bot = telebot.TeleBot("–¢–û–ö–ï–ù")

# –°–ª–æ–≤–∞—Ä—å –∑–∞–¥–∞—á: {–≤—Ä–µ–º—è: (—Å–æ–æ–±—â–µ–Ω–∏–µ, chat_id)}
tasks = {}
# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –≤ –ø–æ—Ä—è–¥–∫–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {chat_id: [(–≤—Ä–µ–º—è, —Å–æ–æ–±—â–µ–Ω–∏–µ)]}
user_task_index = {}

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
def add_task(chat_id, date, message):
    try:
        task_time = datetime.strptime(date, "%Y/%m/%d %H:%M")
        tasks[task_time] = (message, chat_id)
        bot.send_message(chat_id, f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: '{message}' –Ω–∞ {task_time.strftime('%Y/%m/%d %H:%M')}")
    except ValueError:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: YYYY/MM/DD HH:MM")

# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á
def execute_task():
    while True:
        now = datetime.now()
        for task_time in list(tasks):
            if now >= task_time:
                message, chat_id = tasks[task_time]
                bot.send_message(chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message}")
                del tasks[task_time]
        time.sleep(60)

def run_scheduler():
    threading.Thread(target=execute_task, daemon=True).start()

# /start
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n\nüìå –û—Ç–ø—Ä–∞–≤—å:\n`YYYY/MM/DD HH:MM, —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏`\n"
        "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
        parse_mode="Markdown",
    )

# /help
@bot.message_handler(commands=["help"])
def help_command(message):
    bot.send_message(
        message.chat.id,
        "üõ† *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ `/start` ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"
        "‚Ä¢ `/help` ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "‚Ä¢ `/list` ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n"
        "‚Ä¢ `/delete N` ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ –Ω–æ–º–µ—Ä—É\n\n"
        "*–ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏:*\n`2025/06/20 18:30, –í—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º`",
        parse_mode="Markdown",
    )

# /list ‚Äî –≤—ã–≤–æ–¥ –∑–∞–¥–∞—á
@bot.message_handler(commands=["list"])
def list_tasks(message):
    chat_id = message.chat.id
    user_tasks = [
        (dt, msg)
        for dt, (msg, cid) in tasks.items()
        if cid == chat_id
    ]
    if not user_tasks:
        bot.send_message(chat_id, "üóí –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tasks.sort()
    user_task_index[chat_id] = user_tasks

    text = "üìã *–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:*\n\n"
    for i, (dt, msg) in enumerate(user_tasks, start=1):
        text += f"{i}. `{dt.strftime('%Y/%m/%d %H:%M')}` ‚Äî {msg}\n"
    bot.send_message(chat_id, text, parse_mode="Markdown")

# /delete ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É
@bot.message_handler(commands=["delete"])
def delete_task(message):
    chat_id = message.chat.id
    try:
        parts = message.text.split()
        if len(parts) != 2 or not parts[1].isdigit():
            raise ValueError

        task_number = int(parts[1])
        if chat_id not in user_task_index:
            bot.send_message(chat_id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /list, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–¥–∞—á–∏.")
            return

        task_list = user_task_index[chat_id]
        if task_number < 1 or task_number > len(task_list):
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
            return

        task_time, _ = task_list[task_number - 1]
        if task_time in tasks and tasks[task_time][1] == chat_id:
            del tasks[task_time]
            bot.send_message(chat_id, f"üóë –ó–∞–¥–∞—á–∞ ‚Ññ{task_number} —É–¥–∞–ª–µ–Ω–∞.")
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É.")
    except ValueError:
        bot.send_message(chat_id, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: `/delete N`", parse_mode="Markdown")
    except Exception:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        date, task_message = message.text.split(",", 1)
        add_task(message.chat.id, date.strip(), task_message.strip())
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ü—Ä–∏–º–µ—Ä: `2025/06/20 15:30, –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ`",
            parse_mode="Markdown",
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
run_scheduler()
bot.polling(none_stop=True)
